type: edu
files:
- name: src/signature/Main.kt
  visible: true
  text: |
    package signature

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Task2Test.kt
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase

    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    class InputClue(
            val input: String,
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                return CheckResult.wrong("Incorrect output. This is a private test. " + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }

    fun inputCase(
            input: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(InputClue(input, isPrivate, hint), input)


    class Task2Test : StageTest<InputClue>() {

        override fun generate() = listOf(
                inputCase("Albert Einstein"),
                inputCase("Nikola Tesla"),
                inputCase("XXXX yyyyyyyyyy", true),
                inputCase("Ivan Ivanov", true),
                inputCase("a a", true)
        )

        private inline fun checkBadgeBorder(badge: String, onFailure: (msg: String) -> Unit) {
            val lines = badge.split("\n")

            if (lines.map { it.length }.toSet().size != 1) {
                onFailure("Your border is not rectangular.")
                return
            }
            if (lines.size < 2) {
                onFailure("Your border is not rectangular.")
                return
            }
            if (lines.first().any { it != '*' } || lines.last() != lines.first()) {
                onFailure("Your top and bottom edges don't consist of '*'.")
                return
            }
            if (!lines.drop(1).dropLast(1).all { it.startsWith("* ") && it.endsWith(" *") }) {
                onFailure("Your left and right edges don't consist of '*' with one space padding.")
                return
            }
        }


        override fun check(reply: String, clue: InputClue): CheckResult {
            val badgeStart = reply.indexOf('*')
            if (badgeStart == -1) {
                return CheckResult.wrong("Your output doesn't contain a badge, wrapped in '*' symbols.")
            }

            val userBadge = reply
                    .substring(badgeStart)
                    .trim('\n', ' ')

            checkBadgeBorder(userBadge) { errorMessage ->
                return CheckResult.wrong(errorMessage)
            }


            val name = clue.input.trim().split(' ').filter { it != "" }.joinToString(" ")

            val badge = "*".repeat(name.length + 4) + "\n" +
                    "* $name *\n" +
                    "*".repeat(name.length + 4)


            if (badge != userBadge) {
                return clue.toFailure("Wrong output for the input line \"${clue.input}\".")
            } else {
                return CheckResult.correct()
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/6174#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 25 Mar 2023 18:05:52 UTC"
record: 2

type: edu
files:
- name: src/wordsvirtuoso/Main.kt
  visible: true
  text: |
    package wordsvirtuoso

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/WordsVirtuosoTest.kt
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.io.File

    class WordsVirtuosoTest : StageTest<Any>() {
        private val wordFiles = mapOf(
            "somewords.txt" to "stove\nKILOS\nalong\nkites\nartis\nthorn\nflags\njonty\nglift\ninvar" +
                    "\nsteal\nburnt\nrains\nvelar\nafter\ncives\ntrove\ndebag\npaiks\nyoung\nshaft" +
                    "\nbinks\nplows\nchamp\nsixth\nsynod\nroids\nanigh\nforts\natopy\ntired\nskite",
            "wrongwords.txt" to "stove\nkilos\nalong\nkites\nartis\nthorn\nflags\njonty\nglift\ninvar" +
                    "\nand\ncontain\nhello\nΔrash\nedt#r\n1nums\nwo rd",
            "somecandidates.txt" to "STOVE\nkilos\nalong\nkites\nthorn\nflags\nsteal\nburnt\nrains\nafter" +
                    "\nyoung\nshaft\nsixth\ntired",
            "wrongcandidates.txt" to "stove\nkilos\nalong\nkites\nthorn\nflags\nsteal\nburnt\nrains\nafter" +
                    "\nand\ncontain\nhello\nΔrash\nedt#r\n1nums\nwo rd\n12345\nPizza",
            "addcandidates.txt" to "STOVE\nkilos\nalong\nkites\nthorn\nflags\nsteal\nburnt\nrains\nafter" +
                    "\nyoung\nshaft\nsixth\ntired\neight\ncharm\nmetro",
            "oneword1.txt" to "azure",
            "oneword2.txt" to "could",
            "oneword3.txt" to "music",
            "threewords1.txt" to "cover\nguild\ncould",
            "fourwords1.txt" to "tulip\npoker\nmouse\nmusic"
        )

        @DynamicTest(order = 1)
        fun wrongArgumentsTest(): CheckResult {
            val argsList = listOf(
                arrayOf(""),
                arrayOf("words.txt"),
                arrayOf("words.txt", "candidates.txt", "other.txt")
            )
            for (args in argsList) {
                val co = CheckOutput()
                co.setArguments(*args)
                if (!co.start("Error: Wrong number of arguments."))
                    return CheckResult(false, "Your output should contain \"Error: Wrong number of arguments.\"")
                if (!co.programIsFinished())
                    return CheckResult(false, "The application didn't exit.")
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 2, files = "wordFiles")
        fun noExistFilesTest(): CheckResult {

            var co = CheckOutput()
            co.setArguments("noexist.txt", "candidates.txt")
            if (!co.start("Error: The words file noexist.txt doesn't exist."))
                return CheckResult(false,
                    "Your output should contain \"The words file noexist.txt doesn't exist.\"")
            if (!co.programIsFinished())
                return CheckResult(false, "The application didn't exit.")
            co = CheckOutput()
            co.setArguments("somewords.txt", "noexist.txt")
            if (!co.start("Error: The candidate words file noexist.txt doesn't exist."))
                return CheckResult(false,
                    "Your output should contain \"Error: The candidate words file noexist.txt doesn't exist.\"")
            if (!co.programIsFinished())
                return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 3, files = "wordFiles")
        fun invalidWordsTest(): CheckResult {
            val co = CheckOutput()
            co.setArguments("wrongwords.txt", "somecandidates.txt")
            if (!co.start("Error: 7 invalid words were found in the wrongWords.txt file."))
                return CheckResult(false,
                    "Wrong error message after input of a words file with invalid words.")
            if (!co.programIsFinished())
                return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 4, files = "wordFiles")
        fun invalidCandidatesTest(): CheckResult {
            val co = CheckOutput()
            co.setArguments("somewords.txt", "wrongcandidates.txt")
            if (!co.start("Error: 9 invalid words were found in the wrongcandidates.txt file."))
                return CheckResult(false,
                    "Wrong error message after input of a candidate words file with invalid words.")
            if (!co.programIsFinished())
                return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 5, files = "wordFiles")
        fun additionalCandidatesTest(): CheckResult {
            val co = CheckOutput()
            co.setArguments("somewords.txt", "addcandidates.txt")
            if (!co.start("Error: 3 candidate words are not included in the somewords.txt file."))
                return CheckResult(false,
                    "Wrong error message after input of a candidate words file with additional words.")
            if (!co.programIsFinished())
                return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 6, files = "wordFiles")
        fun normalRunTest2(): CheckResult {
            val co = CheckOutput()
            co.setArguments("somewords.txt", "somecandidates.txt")
            if (!co.start("Words Virtuoso"))
                return CheckResult(false, "Your output should contain \"Words Virtuoso\"")
            co.stop()

            return CheckResult.correct()
        }

        @DynamicTest(order = 7, files = "wordFiles")
        fun wrongInputWordsTest(): CheckResult {
            val co = CheckOutput()
            co.setArguments("somewords.txt", "somecandidates.txt")
            if (!co.start("Words Virtuoso", "Input a 5-letter word:"))
                return CheckResult(false, "Your output should contain \"Words Virtuoso\"")

            val noFiveLetters = listOf("trains", "One", "Four", "Two Words", "trouvée")
            noFiveLetters.forEach { input ->
                if (!co.input(input, "The input isn't a 5-letter word.", "Input a 5-letter word:"))
                    return CheckResult(false,
                        "Your output should contain \"The input isn't a 5-letter word." +
                                "\nInput a 5-letter word:\"")
            }

            val invalidLetters = listOf("ΗΛΙΟΣ", "étage", "word1", "12345")
            invalidLetters.forEach { input ->
                if (!co.input(input, "One or more letters of the input aren't valid.", "Input a 5-letter word:"))
                    return CheckResult(false,
                        "Your output should contain \"One or more letters of the input aren't valid." +
                                "\nInput a 5-letter word:\"")
            }

            val duplicateLetters = listOf("walls", "hello", "pizza")
            duplicateLetters.forEach { input ->
                if (!co.input(input, "The input has duplicate letters.", "Input a 5-letter word:"))
                    return CheckResult(false,
                        "Your output should contain \"The input has duplicate letters." +
                                "\nInput a 5-letter word:\"")
            }

            if (!co.input("exit", "The game is over."))
                return CheckResult(false,
                    "Your output should contain \"The game is over.\"")

            if (!co.programIsFinished())
                return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 8, files = "wordFiles")
        fun wordNotInFile(): CheckResult {
            val co = CheckOutput()
            co.setArguments("somewords.txt", "somecandidates.txt")
            if (!co.start("Words Virtuoso", "Input a 5-letter word:"))
                return CheckResult(false, "Your output should contain \"Words Virtuoso\"")

            val notInFile = listOf("abcde", "KLMNO", "qwert", "AsDfG")
            notInFile.forEach { input ->
                if (!co.input(input, "The input word isn't included in my words list.", "Input a 5-letter word:"))
                    return CheckResult(false,
                        "Your output should contain \"The input word isn't included in my words list." +
                                "\nInput a 5-letter word:\"")
            }

            if (!co.input("exit", "The game is over."))
                return CheckResult(false,
                    "Your output should contain \"The game is over.\"")

            if (!co.programIsFinished())
                return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 9, files = "wordFiles")
        fun normalRun4File(): CheckResult {
            val co = CheckOutput()
            co.setArguments("oneword1.txt", "oneword1.txt")
            if (!co.start("Words Virtuoso", "Input a 5-letter word:"))
                return CheckResult(false, "Your output should contain \"Words Virtuoso\"")

            if (!co.input("azure", "AZURE", "Correct!", "Amazing luck! The solution was found at once."))
                return CheckResult(false,
                    "Your output should contain \"AZURE\nCorrect!\nAmazing luck! The solution was found at once.\"")

            if (!co.programIsFinished())
                return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 10, files = "wordFiles")
        fun normalRun5File(): CheckResult {
            val co = CheckOutput()
            co.setArguments("threewords1.txt", "oneword2.txt")
            if (!co.start("Words Virtuoso", "Input a 5-letter word:"))
                return CheckResult(false, "Your output should contain \"Words Virtuoso\"")

            if (!co.input("cover", "CO___", "ERV", "Input a 5-letter word:"))
                return CheckResult(false,
                    "Your output should contain \"CO___\nERV\nInput a 5-letter word:\"")

            if (!co.input("guild", "CO___", "_u_LD", "EGIRV", "Input a 5-letter word:"))
                return CheckResult(false,
                    "Your output should contain \"CO___\n_u_LD\nEGIRV\nInput a 5-letter word:\"")

            if (!co.input("could", "CO___", "_u_LD", "COULD", "Correct!"))
                return CheckResult(false,
                    "Your output should contain \"CO___\n_u_LD\nCOULD\nCorrect!\"")

            val reportStr = co.getLastOutput().substring(co.position + 1)
            if ("The solution was found after 3 tries in \\d+ seconds.".toRegex().find(reportStr) == null)
                return CheckResult(false,
                    "Wrong message on number of tries and lapsed time.")

            if (!co.programIsFinished())
                return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 11, files = "wordFiles")
        fun normalRun6File(): CheckResult {
            val co = CheckOutput()
            co.setArguments("fourwords1.txt", "oneword3.txt")
            if (!co.start("Words Virtuoso", "Input a 5-letter word:"))
                return CheckResult(false, "Your output should contain \"Words Virtuoso\"")

            if (!co.input("mouse", "M_us_", "EO", "Input a 5-letter word:"))
                return CheckResult(false,
                    "Your output should contain \"M_us_\nEO\nInput a 5-letter word:\"")

            if (!co.input("poker", "M_us_", "_____", "EKOPR", "Input a 5-letter word:"))
                return CheckResult(false,
                    "Your output should contain \"M_us_\n_____\nEKOPR\nInput a 5-letter word:\"")

            if (!co.input("tulip", "M_us_", "_____", "_U_I_", "EKLOPRT", "Input a 5-letter word:"))
                return CheckResult(false,
                    "Your output should contain \"M_us_\n_____\n_U_I_\nEKLOPRT\nInput a 5-letter word:\"")

            if (!co.input("music", "M_us_", "_____", "_U_I_", "MUSIC", "Correct!"))
                return CheckResult(false,
                    "Your output should contain \"M_us_\n_____\n_U_I_\nMUSIC\nCorrect!\"")

            val reportStr = co.getLastOutput().substring(co.position + 1)
            if ("The solution was found after 4 tries in \\d+ seconds.".toRegex().find(reportStr) == null)
                return CheckResult(false,
                    "Wrong message on number of tries and lapsed time.")

            if (!co.programIsFinished())
                return CheckResult(false, "The application didn't exit.")

            return CheckResult.correct()
        }

        @DynamicTest(order = 12, files = "wordFiles")
        fun checkIfWordsRandomFile2(): CheckResult {
            val words = listOf("cover", "guild", "could")
            val counts = IntArray(3)

            repeat(15) {
                val co = CheckOutput()
                co.setArguments("threewords1.txt", "threewords1.txt")
                co.start("Words Virtuoso", "Input a 5-letter word:")

                for ((index, word) in words.withIndex()) {
                    if (co.getNextOutput(word).contains("Correct!")) {
                        counts[index]++
                        break
                    }
                }
            }

            if (counts[0] * counts[1] * counts[2] == 0)
                return CheckResult(false, "Words aren't random chosen.")

            return CheckResult.correct()
        }
    }

    class CheckOutput {
        private var main: TestedProgram = TestedProgram()
        var position = 0
        private var caseInsensitive = true
        private var trimOutput = true
        private val arguments= mutableListOf<String>()
        private var isStarted = false
        private var lastOutput = ""

        private fun checkOutput(outputString: String, vararg checkStr: String): Boolean {
            var searchPosition = position
            for (cStr in checkStr) {
                val str = if (caseInsensitive) cStr.lowercase() else cStr
                val findPosition = outputString.indexOf(str, searchPosition)
                if (findPosition == -1) return false
                if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return false
                searchPosition = findPosition + str.length
            }
            position = searchPosition
            return true
        }

        fun start(vararg checkStr: String): Boolean {
            return if (!isStarted) {
                var outputString = main.start(*arguments.toTypedArray())
                lastOutput = outputString
                if (trimOutput) outputString = outputString.trim()
                if (caseInsensitive) outputString = outputString.lowercase()
                isStarted = true
                checkOutput(outputString, *checkStr)
            } else false
        }

        fun stop() {
            main.stop()
        }

        fun input(input: String, vararg checkStr: String): Boolean {
            if (main.isFinished) return false
            var outputString = main.execute(input)
            lastOutput = outputString
            if (trimOutput) outputString = outputString.trim()
            if (caseInsensitive) outputString = outputString.lowercase()
            position = 0
            return checkOutput(outputString, *checkStr)
        }

        fun inputNext(vararg checkStr: String): Boolean {
            var outputString = lastOutput
            if (trimOutput) outputString = outputString.trim()
            if (caseInsensitive) outputString = outputString.lowercase()
            return checkOutput(outputString, *checkStr)
        }

        fun getNextOutput(input: String): String {
            if (main.isFinished) return ""
            val outputString = main.execute(input)
            lastOutput = outputString
            position = 0
            return  outputString
        }

        fun getLastOutput(): String { return lastOutput }
        fun programIsFinished(): Boolean  = main.isFinished
        fun setArguments(vararg args: String) { arguments.addAll(args.toMutableList()) }
        fun setCaseSensitivity(caseInsensitive: Boolean) { this.caseInsensitive = caseInsensitive }
        fun setOutputTrim(trimOutput: Boolean) { this.trimOutput = trimOutput}
    }
  learner_created: false
- name: src/wordsvirtuoso/VirtuosoException.kt
  visible: true
  text: |-
    package wordsvirtuoso

    sealed class VirtuosoException(message: String) : RuntimeException(message) {
        object WrongArgs : VirtuosoException("Wrong number of arguments.")
        class NoSuchWordsFile(filename: String) : VirtuosoException("The words file $filename doesn't exist.")
        class NoSuchCandidatesFile(filename: String) : VirtuosoException("The candidate words file $filename doesn't exist.")
        class InvalidWords(filename: String, number: Int): VirtuosoException("$number invalid words were found in the $filename file.")
        class CandidatesNotInWords(wordsFilename: String, number: Int): VirtuosoException("$number candidate words are not included in the $wordsFilename file.")
    }
  learner_created: true
- name: src/wordsvirtuoso/CheckResult.kt
  visible: true
  text: |-
    package wordsvirtuoso

    enum class CheckResult(val message: String) {
        WrongLength("The input isn't a 5-letter word."),
        InvalidChars("One or more letters of the input aren't valid."),
        DuplicateChars("The input has duplicate letters."),
        InvalidWord("The input word isn't included in my words list."),
        Valid("The input is a valid string.")
    }
  learner_created: true
- name: src/wordsvirtuoso/WordsVirtuoso.kt
  visible: true
  text: |-
    package wordsvirtuoso

    class WordsVirtuoso(private val words: Dictionary, candidates: Dictionary) {
        private val secret: String = candidates.words.random()

        fun start() {
            println("Words Virtuoso")

            while (true) {
                println("\nInput a 5-letter word:")

                val toPrint = when (val word = readln().lowercase()) {
                    "exit" -> return println("\nThe game is over.")
                    secret -> return println("\nCorrect!")
                    else -> when (val result = words.check(word)) {
                        CheckResult.Valid -> word.asSequence()
                            .withIndex()
                            .joinToString("") { (i, char) ->
                                when (secret.indexOf(char)) {
                                    -1 -> "_"
                                    i -> char.uppercase()
                                    else -> char.toString()
                                }
                            }
                        else -> result.message
                    }
                }

                println(toPrint)
            }
        }
    }
  learner_created: true
- name: src/wordsvirtuoso/Dictionary.kt
  visible: true
  text: |-
    package wordsvirtuoso

    import java.nio.file.Path
    import kotlin.io.path.Path
    import kotlin.io.path.useLines

    fun Path.lineSequence(): Sequence<String> = sequence { this@lineSequence.useLines { yieldAll(it) } }

    class Dictionary(filepath: String) {
        val words: Set<String>

        init {
            val (valid, invalid) = Path(filepath)
                .lineSequence()
                .partition { Companion.check(it) == CheckResult.Valid }

            if (invalid.isNotEmpty())
                throw VirtuosoException.InvalidWords(filepath, invalid.size)

            words = valid
                .asSequence()
                .map { it.lowercase() }
                .toSet()
        }

        fun check(string: String): CheckResult {
            return when (val result = Companion.check(string)) {
                CheckResult.Valid -> if (string in words) result else CheckResult.InvalidWord
                else -> result
            }
        }

        companion object {
            fun check(string: String): CheckResult {
                if (string.length != 5)
                    return CheckResult.WrongLength

                val chars = string.toSet()
                val unique = chars.asSequence()
                    .filter { it in 'a'..'z' || it in 'A'..'Z' }
                    .count()

                if (unique < chars.size)
                    return CheckResult.InvalidChars

                if (unique < 5)
                    return CheckResult.DuplicateChars

                return CheckResult.Valid
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/290/stages/1515/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 27 Mar 2023 17:52:06 UTC"
record: 5

type: edu
files:
- name: src/chess/Main.kt
  visible: true
  text: |-
    package chess

    fun main() {
    //    write your code here
    }
  learner_created: false
- name: test/PawnsOnlyChessTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram

    class PawnsOnlyChessTest : StageTest<Any>() {
        @DynamicTest
        fun testAdd5(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) { index -> Pair(1, index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) { index -> Pair(6, index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            for (ch in 'a'..'h') {
                outputString = main.execute("${ch}2${ch}4").trim()
                pawnsWhite.remove(Pair(1, ch - 'h' + 7))
                pawnsWhite.add(Pair(3, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("${ch}7${ch}5").trim()
                pawnsBlack.remove(Pair(6, ch - 'h' + 7))
                pawnsBlack.add(Pair(4, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")
            }

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "bye")
            if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test1(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e2e4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(3, 4))
            outputString = main.execute("d7d5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 3))
            pawnsBlack.add(Pair(4, 3))
            outputString = main.execute("e4d5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 3))
            pawnsWhite.remove(Pair(3, 4))
            pawnsWhite.add(Pair(4, 3))
            outputString = main.execute("c7c6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 2))
            pawnsBlack.add(Pair(5, 2))
            outputString = main.execute("d5d6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(4, 3))
            pawnsWhite.add(Pair(5, 3))
            outputString = main.execute("c6c5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(5, 2))
            pawnsBlack.add(Pair(4, 2))
            outputString = main.execute("d6d7").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(5, 3))
            pawnsWhite.add(Pair(6, 3))
            outputString = main.execute("c5c4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 2))
            pawnsBlack.add(Pair(3, 2))
            outputString = main.execute("d7d8").trim()
            pawnsWhite.remove(Pair(6, 3))
            pawnsWhite.add(Pair(7, 3))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after white pawn reaches 8th rank.")
            position = checkOutput(outputString.toLowerCase(), position, "white wins!", "bye")
            if ( position  == -1 ) return CheckResult(false, "Wrong output after white pawn reaches 8th rank.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test2(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e2e4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(3, 4))
            outputString = main.execute("d7d5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 3))
            pawnsBlack.add(Pair(4, 3))
            outputString = main.execute("b2b3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 1))
            pawnsWhite.add(Pair(2, 1))
            outputString = main.execute("d5e4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 4))
            pawnsBlack.remove(Pair(4, 3))
            pawnsBlack.add(Pair(3, 4))
            outputString = main.execute("b3b4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(2, 1))
            pawnsWhite.add(Pair(3, 1))
            outputString = main.execute("e4e3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(3, 4))
            pawnsBlack.add(Pair(2, 4))
            outputString = main.execute("b4b5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 1))
            pawnsWhite.add(Pair(4, 1))
            outputString = main.execute("e3e2").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(2, 4))
            pawnsBlack.add(Pair(1, 4))
            outputString = main.execute("b5b6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(4, 1))
            pawnsWhite.add(Pair(5, 1))
            outputString = main.execute("e2e1").trim()
            pawnsBlack.remove(Pair(1, 4))
            pawnsBlack.add(Pair(0, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after black pawn reaches 1st rank.")
            position = checkOutput(outputString.toLowerCase(), position, "black wins!", "bye")
            if ( position  == -1 ) return CheckResult(false, "Wrong output after black pawn reaches 1st rank.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test3(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("a2a4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 0))
            pawnsWhite.add(Pair(3, 0))
            outputString = main.execute("b7b5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 1))
            pawnsBlack.add(Pair(4, 1))
            outputString = main.execute("a4b5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 1))
            pawnsWhite.remove(Pair(3, 0))
            pawnsWhite.add(Pair(4, 1))
            outputString = main.execute("c7c6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 2))
            pawnsBlack.add(Pair(5, 2))
            outputString = main.execute("b5c6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(5, 2))
            pawnsWhite.remove(Pair(4, 1))
            pawnsWhite.add(Pair(5, 2))
            outputString = main.execute("a7a5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 0))
            pawnsBlack.add(Pair(4, 0))
            outputString = main.execute("c6d7").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 3))
            pawnsWhite.remove(Pair(5, 2))
            pawnsWhite.add(Pair(6, 3))
            outputString = main.execute("a5a4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 0))
            pawnsBlack.add(Pair(3, 0))
            outputString = main.execute("d2d4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 3))
            pawnsWhite.add(Pair(3, 3))
            outputString = main.execute("e7e5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 4))
            pawnsBlack.add(Pair(4, 4))
            outputString = main.execute("d4e5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 4))
            pawnsWhite.remove(Pair(3, 3))
            pawnsWhite.add(Pair(4, 4))
            outputString = main.execute("f7f6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 5))
            pawnsBlack.add(Pair(5, 5))
            outputString = main.execute("e5f6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(5, 5))
            pawnsWhite.remove(Pair(4, 4))
            pawnsWhite.add(Pair(5, 5))
            outputString = main.execute("h7h5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 7))
            pawnsBlack.add(Pair(4, 7))
            outputString = main.execute("f6g7").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 6))
            pawnsWhite.remove(Pair(5, 5))
            pawnsWhite.add(Pair(6, 6))
            outputString = main.execute("a4a3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(3, 0))
            pawnsBlack.add(Pair(2, 0))
            outputString = main.execute("b2a3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(2, 0))
            pawnsWhite.remove(Pair(1, 1))
            pawnsWhite.add(Pair(2, 0))
            outputString = main.execute("h5h4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 7))
            pawnsBlack.add(Pair(3, 7))
            outputString = main.execute("c2c3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 2))
            pawnsWhite.add(Pair(2, 2))
            outputString = main.execute("h4h3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(3, 7))
            pawnsBlack.add(Pair(2, 7))
            outputString = main.execute("g2h3").trim()
            pawnsBlack.remove(Pair(2, 7))
            pawnsWhite.remove(Pair(1, 6))
            pawnsWhite.add(Pair(2, 7))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after white captures all black pawns.")
            position = checkOutput(outputString.toLowerCase(), position, "white wins!", "bye")
            if ( position  == -1 ) return CheckResult(false, "Wrong output after white wins after capturing all black pawns.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test4(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("a2a4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 0))
            pawnsWhite.add(Pair(3, 0))
            outputString = main.execute("b7b5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 1))
            pawnsBlack.add(Pair(4, 1))
            outputString = main.execute("h2h3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 7))
            pawnsWhite.add(Pair(2, 7))
            outputString = main.execute("b5a4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 0))
            pawnsBlack.remove(Pair(4, 1))
            pawnsBlack.add(Pair(3, 0))
            outputString = main.execute("b2b3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 1))
            pawnsWhite.add(Pair(2, 1))
            outputString = main.execute("a4b3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(2, 1))
            pawnsBlack.remove(Pair(3, 0))
            pawnsBlack.add(Pair(2, 1))
            outputString = main.execute("h3h4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(2, 7))
            pawnsWhite.add(Pair(3, 7))
            outputString = main.execute("b3c2").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 2))
            pawnsBlack.remove(Pair(2, 1))
            pawnsBlack.add(Pair(1, 2))
            outputString = main.execute("h4h5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 7))
            pawnsWhite.add(Pair(4, 7))
            outputString = main.execute("c7c5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 2))
            pawnsBlack.add(Pair(4, 2))
            outputString = main.execute("d2d4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 3))
            pawnsWhite.add(Pair(3, 3))
            outputString = main.execute("c5d4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 3))
            pawnsBlack.remove(Pair(4, 2))
            pawnsBlack.add(Pair(3, 3))
            outputString = main.execute("e2e3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(2, 4))
            outputString = main.execute("d4e3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(2, 4))
            pawnsBlack.remove(Pair(3, 3))
            pawnsBlack.add(Pair(2, 4))
            outputString = main.execute("g2g4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 6))
            pawnsWhite.add(Pair(3, 6))
            outputString = main.execute("e3f2").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 5))
            pawnsBlack.remove(Pair(2, 4))
            pawnsBlack.add(Pair(1, 5))
            outputString = main.execute("h5h6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(4, 7))
            pawnsWhite.add(Pair(5, 7))
            outputString = main.execute("g7h6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(5, 7))
            pawnsBlack.remove(Pair(6, 6))
            pawnsBlack.add(Pair(5, 7))
            outputString = main.execute("g4g5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 6))
            pawnsWhite.add(Pair(4, 6))
            outputString = main.execute("h6g5").trim()
            pawnsWhite.remove(Pair(4, 6))
            pawnsBlack.remove(Pair(5, 7))
            pawnsBlack.add(Pair(4, 6))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after black captures all white pawns.")
            position = checkOutput(outputString.toLowerCase(), position, "black wins!", "bye")
            if ( position  == -1 ) return CheckResult(false, "Wrong output after black wins after capturing all white pawns.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test5(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("a2a4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 0))
            pawnsWhite.add(Pair(3, 0))
            outputString = main.execute("b7b5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 1))
            pawnsBlack.add(Pair(4, 1))
            outputString = main.execute("a4b5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 1))
            pawnsWhite.remove(Pair(3, 0))
            pawnsWhite.add(Pair(4, 1))
            outputString = main.execute("c7c6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 2))
            pawnsBlack.add(Pair(5, 2))
            outputString = main.execute("b5c6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(5, 2))
            pawnsWhite.remove(Pair(4, 1))
            pawnsWhite.add(Pair(5, 2))
            outputString = main.execute("a7a5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 0))
            pawnsBlack.add(Pair(4, 0))
            outputString = main.execute("c6d7").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 3))
            pawnsWhite.remove(Pair(5, 2))
            pawnsWhite.add(Pair(6, 3))
            outputString = main.execute("a5a4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 0))
            pawnsBlack.add(Pair(3, 0))
            outputString = main.execute("d2d4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 3))
            pawnsWhite.add(Pair(3, 3))
            outputString = main.execute("e7e5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 4))
            pawnsBlack.add(Pair(4, 4))
            outputString = main.execute("d4e5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 4))
            pawnsWhite.remove(Pair(3, 3))
            pawnsWhite.add(Pair(4, 4))
            outputString = main.execute("f7f6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 5))
            pawnsBlack.add(Pair(5, 5))
            outputString = main.execute("e5f6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(5, 5))
            pawnsWhite.remove(Pair(4, 4))
            pawnsWhite.add(Pair(5, 5))
            outputString = main.execute("h7h5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 7))
            pawnsBlack.add(Pair(4, 7))
            outputString = main.execute("f6g7").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 6))
            pawnsWhite.remove(Pair(5, 5))
            pawnsWhite.add(Pair(6, 6))
            outputString = main.execute("a4a3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(3, 0))
            pawnsBlack.add(Pair(2, 0))
            outputString = main.execute("b2a3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(2, 0))
            pawnsWhite.remove(Pair(1, 1))
            pawnsWhite.add(Pair(2, 0))
            outputString = main.execute("h5h4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 7))
            pawnsBlack.add(Pair(3, 7))
            outputString = main.execute("h2h3").trim()
            pawnsWhite.remove(Pair(1, 7))
            pawnsWhite.add(Pair(2, 7))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after white captures all black pawns.")
            position = checkOutput(outputString.toLowerCase(), position, "stalemate!", "bye")
            if ( position  == -1 ) return CheckResult(false, "Wrong output after white wins after stalemate.")

            return CheckResult.correct()
        }

    }

    fun checkChessboard(outputString: String, searchPos: Int, pawnsWhite: List<Pair<Int, Int>>, pawnsBlack: List<Pair<Int, Int>>): Int {
        fun createChessboardStringList(pawnsWhite: List<Pair<Int, Int>>, pawnsBlack: List<Pair<Int, Int>>): List<String> {
            var chessboard = "  +---+---+---+---+---+---+---+---+\n"
            for (i in 7 downTo 0) {
                chessboard += "${i + 1} |"
                for (j in 0..7) {
                    val square = when {
                        pawnsWhite.contains(Pair(i, j)) -> 'W'
                        pawnsBlack.contains(Pair(i, j)) -> 'B'
                        else -> ' '
                    }
                    chessboard += " $square |"
                }
                chessboard += "\n  +---+---+---+---+---+---+---+---+\n"
            }
            chessboard += "    a   b   c   d   e   f   g   h\n"
    //        println(chessboard)
            return chessboard.trim().split("\n").map { it.trim() }
        }
        val chessboardStringList = createChessboardStringList(pawnsWhite, pawnsBlack)
        return checkOutput(outputString, searchPos, * chessboardStringList.toTypedArray())
    }

    fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
        var searchPosition = searchPos
        for (str in checkStr) {
            val findPosition = outputString.indexOf(str, searchPosition)
            if (findPosition == -1) return -1
            if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
            searchPosition = findPosition + str.length
        }
        return searchPosition
    }


  learner_created: false
- name: src/chess/Vector2.kt
  visible: true
  text: |-
    package chess

    data class Vector2(val x: Int, val y: Int) {
        operator fun plus(other: Vector2) = Vector2(x + other.x, y + other.y)
        operator fun minus(other: Vector2) = Vector2(x - other.x, y - other.y)
        operator fun times(other: Vector2) = Vector2(x * other.x, y * other.y)
    }
  learner_created: true
- name: src/chess/Chess.kt
  visible: true
  text: |-
    package chess

    const val BOARD_SEP = "  +---+---+---+---+---+---+---+---+"
    const val BOARD_FOOTER = "    a   b   c   d   e   f   g   h"
    const val BOARD_SIZE = 8
    const val A = 'a'.code
    val regex = Regex("([a-h][1-8]){2}")

    fun Boolean.toMove(): Chess.MoveResult {
        return if (this) Chess.MoveResult.OK
        else Chess.MoveResult.INVALID_MOVE
    }

    class Chess(private val player1: String, val player2: String) {
        private enum class Move {
            FORWARD1,
            FORWARD2,
            CAPTURE_LEFT,
            CAPTURE_RIGHT,
            INVALID;

            companion object {
                fun new(from: Vector2, _to: Vector2, player1: Boolean): Move {
                    var delta = _to - from
                    delta = if (player1) delta * Vector2(1, -1) else delta

                    return when (delta) {
                        Vector2(0, 1) -> FORWARD1
                        Vector2(0, 2) -> FORWARD2
                        Vector2(-1, 1) -> CAPTURE_LEFT
                        Vector2(1, 1) -> CAPTURE_RIGHT
                        else -> INVALID
                    }
                }
            }
        }

        enum class MoveResult {
            PARSE_ERROR,
            NO_PAWN_AT_START,
            INVALID_MOVE,
            OK
        }

        private sealed class Cell {
            abstract class Pawn(var firstMove: Boolean = true): Cell()
            class White : Pawn()
            class Black : Pawn()
            object Empty : Cell()


            override fun toString(): String {
                return when (this) {
                    is White -> "W"
                    is Black -> "B"
                    else -> " "
                }
            }
        }

        private var player1Pawns: Int = BOARD_SIZE
        private var player2Pawns: Int = BOARD_SIZE
        private val vulnerable: ArrayDeque<Pair<Int, Vector2>> = ArrayDeque(2)

        private val board: Array<Array<Cell>> = Array(BOARD_SIZE) {
            val values: (Int) -> Cell = when (it) {
                1 -> ({ Cell.Black() })
                6 -> ({ Cell.White() })
                else -> ({ Cell.Empty })
            }

            Array(BOARD_SIZE, values)
        }

        fun start() {
            println(this)
            var player1 = true

            while (!(this.player1Wins() || this.player2Wins())) {
                println("${if (player1) this.player1 else this.player2}'s turn:")

                when (val move = readln()) {
                    "exit" -> return println("Bye!")
                    else -> when (this.move(move, player1)) {
                        MoveResult.PARSE_ERROR, MoveResult.INVALID_MOVE -> println("Invalid Input")
                        MoveResult.NO_PAWN_AT_START -> println("No ${if (player1) "white" else "black"} pawn at ${move.substring(0..1)}")
                        MoveResult.OK -> {
                            player1 = !player1
                            println(this)

                            for (i in this.vulnerable.indices) {
                                val pawn = this.vulnerable[i]
                                this.vulnerable[i] = pawn.copy(first = pawn.first - 1)
                            }

                            if ((this.vulnerable.lastOrNull() ?: Pair(null, null)).first == 0) {
                                this.vulnerable.removeLast()
                            }
                        }
                    }
                }
            }
        }

        private fun move(move: String, player1: Boolean = true): MoveResult {
            val (from, _to) = this.parseMove(move) ?: return MoveResult.PARSE_ERROR

            return this.checkValidMove(from, _to, player1).let {
                if (it == MoveResult.OK)
                    doMove(from, _to)

                it
            }
        }

        override fun toString(): String {
            return this.board
                .asSequence()
                .withIndex()
                .map { (i, row) ->
                    "${BOARD_SEP}\n${BOARD_SIZE - i} | ${row.joinToString(" | ")} |"
                }.joinToString("\n") + "\n$BOARD_SEP\n$BOARD_FOOTER"
        }

        private fun doMove(from: Vector2, _to: Vector2) {
            val pawn = this.board[from.y][from.x] as Cell.Pawn

            if (pawn.firstMove) {
                this.vulnerable.add(2 to _to)
                pawn.firstMove = false
            }

            this.board[from.y][from.x] = Cell.Empty

            when (this.board[_to.y][_to.x]) {
                is Cell.White -> this.player1Pawns--
                is Cell.Black -> this.player2Pawns--
                else -> {}
            }

            this.board[_to.y][_to.x] = pawn
        }

        private fun checkValidMove(from: Vector2, _to: Vector2, player1: Boolean = true): MoveResult {
            val move = Move.new(from, _to, player1)
            val fromCell = board[from.y][from.x]
            val toCell = board[_to.y][_to.x]

            return when {
                fromCell is Cell.White && player1 || fromCell is Cell.Black && !player1 -> {
                    when (move) {
                        Move.FORWARD1 -> (toCell is Cell.Empty).toMove()
                        Move.FORWARD2 -> ((fromCell as Cell.Pawn).firstMove && this.pathIsEmpty(from, _to)).toMove()
                        Move.CAPTURE_LEFT, Move.CAPTURE_RIGHT -> (this.enPassant(from, _to, player1) || (player1 && toCell is Cell.Black) || (!player1 && toCell is Cell.White)).toMove()
                        Move.INVALID -> MoveResult.INVALID_MOVE
                    }
                }
                else -> MoveResult.NO_PAWN_AT_START
            }
        }

        private fun enPassant(from: Vector2, _to: Vector2, player1: Boolean): Boolean {
            return when ((this.vulnerable.lastOrNull() ?: Pair(null, null)).second) {
                Vector2(from.y, _to.x) -> {
                    when (this.board[from.y][_to.x]) {
                        is Cell.White -> if (player1) return false
                            else this.player1Pawns--
                        is Cell.Black -> if (!player1) return false
                        else -> this.player2Pawns--
                    }

                    this.board[from.y][_to.x] = Cell.Empty
                    true
                }
                else -> false
            }
        }

        private fun pathIsEmpty(start: Vector2, end: Vector2): Boolean {
            val range = if (start.y < end.y) {
                start.y + 1..end.y
            } else {
                start.y - 1 downTo end.y
            }

            for (y in range) {
                if (this.board[y][start.x] !is Cell.Empty)
                    return false
            }

            return true
        }

        private fun player1Wins(): Boolean {
            return this.player2Pawns == 0 || this.board.first().any { it is Cell.White }
        }

        private fun player2Wins(): Boolean {
            return this.player1Pawns == 0 || this.board.last().any { it is Cell.Black }
        }

        private fun parseMove(move: String): Pair<Vector2, Vector2>? {
            if (!regex.matches(move))
                return null

            return Pair(parsePosition(move[0], move[1]), parsePosition(move[2], move[3]))
        }

        private fun parsePosition(file: Char, rank: Char): Vector2 = Vector2(file.code - A, BOARD_SIZE - rank.digitToInt())
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13178#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 20 Mar 2023 18:25:21 UTC"
record: -1

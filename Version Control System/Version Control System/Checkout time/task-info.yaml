type: edu
files:
- name: src/svcs/Main.kt
  visible: true
  text: |-
    package svcs

    fun main(args: Array<String>) {

    }
  learner_created: false
- name: test/Tests.kt
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram
    import java.io.File
    import java.io.File.separatorChar
    import java.io.FileNotFoundException
    import java.io.IOException
    import kotlin.random.Random

    // version 1.2
    class TestStage4 : StageTest<String>() {

        @DynamicTest(order = 1)
        fun checkVcsDirAndFileExistsAfterConfigCommand(): CheckResult {
            deleteVcsDir()
            val dir = File("vcs")
            val configPath = "vcs${separatorChar}config.txt"
            val config =  File(configPath)
            val testFeedback = "\n\nMake sure vcs folder and $configPath file are being created by the program."
            val dirNotFoundMessage = "Could not find vcs folder after executing config command.$testFeedback"
            val configNotFoundMessage = "Could not find $configPath after executing config command.$testFeedback"
            val fileNotFoundMessage = "Your program has thrown some IOException.$testFeedback"

            try {
                val testedProgram = TestedProgram()
                testedProgram.feedbackOnException(java.io.IOException::class.java, fileNotFoundMessage)
                testedProgram.start("config", "Max")

                when {
                    dir.exists().not() || dir.isDirectory.not() -> return CheckResult.wrong(dirNotFoundMessage)
                    config.exists().not() -> return CheckResult.wrong(configNotFoundMessage)
                }

            } finally {
                deleteVcsDir()
            }
            return CheckResult.correct()
        }

        @DynamicTest(order = 2)
        fun checkVcsDirAndFileExistsAfterAddCommand(): CheckResult {

            val dir = File("vcs")
            val indexPath = "vcs${separatorChar}index.txt"
            val index =  File(indexPath)
            val testFeedback = "\n\nMake sure vcs folder and $indexPath file are being created by the program."
            val dirNotFoundMessage = "Could not find vcs folder after executing add command.$testFeedback"
            val configNotFoundMessage = "Could not find $indexPath after executing add command.$testFeedback"
            val fileNotFoundMessage = "Your program has thrown some IOException.$testFeedback"

            val abcFile = File("abc.txt")
            abcFile.createNewFile()

            try {
                val testedProgram = TestedProgram()
                testedProgram.feedbackOnException(java.io.IOException::class.java, fileNotFoundMessage)
                testedProgram.start("add", abcFile.name)

                when {
                    dir.exists().not() || dir.isDirectory.not() -> return CheckResult.wrong(dirNotFoundMessage)
                    index.exists().not() -> return CheckResult.wrong(configNotFoundMessage)
                }

            } finally {
                deleteVcsDir()
                deleteFiles(abcFile)
            }
            return CheckResult.correct()
        }

        @DynamicTest(order = 3)
        fun helpPageTest(): CheckResult {
            try {
                checkHelpPageOutput(TestedProgram().start())
                checkHelpPageOutput(TestedProgram().start("--help"))
            } finally {
                deleteVcsDir()
            }
            return CheckResult.correct()
        }

        @DynamicTest(order = 4)
        fun configTest(): CheckResult {
            try {
                checkOutputString(TestedProgram().start("config"), "Please, tell me who you are.")
                checkOutputString(TestedProgram().start("config", "Max"), "The username is Max.")
                checkOutputString(TestedProgram().start("config"), "The username is Max.")
                checkOutputString(TestedProgram().start("config", "John"), "The username is John.")
                checkOutputString(TestedProgram().start("config"), "The username is John.")
            } finally {
                deleteVcsDir()
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 5)
        fun addTest(): CheckResult {
            val fileName1 = "file${Random.nextInt(0, 1000)}.txt"
            val fileName2= "file${Random.nextInt(0, 1000)}.txt"

            val file1 = File(fileName1)
            val file2 = File(fileName2)
            file1.createNewFile()
            file2.createNewFile()

            try {
                checkOutputString(TestedProgram().start("add"), "Add a file to the index.")
                checkOutputString(TestedProgram().start("add", fileName1), "The file '$fileName1' is tracked.")
                checkOutputString(TestedProgram().start("add"), "Tracked files:\n$fileName1")
                checkOutputString(TestedProgram().start("add", fileName2), "The file '$fileName2' is tracked.")
                checkOutputString(TestedProgram().start("add"), "Tracked files:\n$fileName1\n$fileName2")

                val notExistsFileName = "file${Random.nextInt(0, 1000)}.txt"
                checkOutputString(
                    TestedProgram().start("add", notExistsFileName),
                    "Can't find '$notExistsFileName'."
                )
            } finally {
                deleteVcsDir()
                deleteFiles(file1, file2)
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 6)
        fun checkCommitsDirAndLogFileExistsAfterCommitCommand(): CheckResult {
            val file1 = File("first_file.txt")
            val file2 = File("second_file.txt")

            file1.writeText("some test data for the first file")
            file2.writeText("some test data for the second file")

            val commitsDirPath = "vcs${separatorChar}commits"
            val commitsDir = File(commitsDirPath)
            val logFilePath = "vcs${separatorChar}log.txt"
            val logFile = File(logFilePath)

            val testFeedback = "\n\nMake sure $commitsDirPath folder and $logFilePath file are being created by the program."
            val commitsDirNotFoundMessage = "Could not find $commitsDirPath folder after executing config command.$testFeedback"
            val logNotFoundMessage = "Could not find $logFilePath after executing config command.$testFeedback"
            val fileNotFoundMessage = "Your program has thrown some IOException.$testFeedback"

            try {
                val username = getRandomUserName()

                TestedProgram().start("config", username)
                TestedProgram().start("add", file1.name)
                TestedProgram().start("add", file2.name)

                val commitProgram = TestedProgram()
                commitProgram.feedbackOnException(java.io.IOException::class.java, fileNotFoundMessage)
                commitProgram.start("commit", "Test message")

                when{
                    commitsDir.exists().not() || commitsDir.isDirectory.not() ->
                        return CheckResult.wrong(commitsDirNotFoundMessage)
                    logFile.exists().not() -> return CheckResult.wrong(logNotFoundMessage)
                }

            } finally {
                deleteVcsDir()
                deleteFiles(file1, file2)
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 7)
        fun commitAndLogTest(): CheckResult {
            val file1 = File("first_file.txt")
            val file2 = File("second_file.txt")

            file1.writeText("some test data for the first file")
            file2.writeText("some test data for the second file")

            try {
                val username = getRandomUserName()

                TestedProgram().start("config", username)
                TestedProgram().start("add", file1.name)
                TestedProgram().start("add", file2.name)

                checkOutputString(TestedProgram().start("log"), "No commits yet.")
                checkOutputString(TestedProgram().start("commit"), "Message was not passed.")
                checkOutputString(TestedProgram().start("commit", "Test message"), "Changes are committed.")

                var got = TestedProgram().start("log")
                var want = "commit [commit id]\n" +
                        "Author: $username\n" +
                        "Test message"

                var regex = Regex(
                    "commit [^\\s]+\n" +
                            "Author: $username\n" +
                            "Test message", RegexOption.IGNORE_CASE
                )
                checkLogOutput(got, want, regex)

                checkOutputString(TestedProgram().start("commit", "Test message2"), "Nothing to commit.")

                file2.appendText("some text")
                checkOutputString(TestedProgram().start("commit", "Test message3"), "Changes are committed.")

                got = TestedProgram().start("log")
                want = "commit [commit id]\n" +
                        "Author: $username\n" +
                        "Test message3\n\n" +
                        "commit [commit id]\n" +
                        "Author: $username\n" +
                        "Test message"
                regex = Regex(
                    "commit [^\\s]+\n" +
                            "Author: $username\n" +
                            "Test message3\n" +
                            "commit [^\\s]+\n" +
                            "Author: $username\n" +
                            "Test message", RegexOption.IGNORE_CASE
                )
                checkLogOutput(got, want, regex)
                checkUniqueCommitHashes(got)

                val commitHashes = parseCommitHashes(got)
                commitHashes.forEach { commitHash ->

                    val commitDirPath = "vcs${separatorChar}commits$separatorChar$commitHash"
                    val commitDir = File(commitDirPath)
                    val versionedFile1 = commitDir.resolve(file1.name)
                    val versionedFile2 = commitDir.resolve(file2.name)
                    val feedbackMessage = "\n\nMake sure you make versions of tracked files on a folder named with the commitId"

                    when{
                        commitDir.exists().not() || commitDir.isDirectory.not() ->
                            return CheckResult.wrong("Could not find folder $commitDirPath$feedbackMessage")

                        versionedFile1.exists().not() ->
                            return CheckResult.wrong("Could not find file ${versionedFile1.name} on $commitDirPath$feedbackMessage")

                        versionedFile2.exists().not() ->
                            return CheckResult.wrong("Could not find file ${versionedFile2.name} on $commitDirPath$feedbackMessage")
                    }
                }

            } finally {
                deleteVcsDir()
                deleteFiles(file1, file2)
            }

            return CheckResult.correct()
        }

        @DynamicTest(order = 8)
        fun checkoutTest(): CheckResult {
            val file1 = File("first_file.txt")
            val file2 = File("second_file.txt")
            val untrackedFile = File("untracked_file.txt")

            file1.createNewFile()
            file2.createNewFile()
            untrackedFile.createNewFile()

            try {
                val username = getRandomUserName()

                TestedProgram().start("config", username)
                TestedProgram().start("add", file1.name)
                TestedProgram().start("add", file2.name)

                val initialContentFile1 = "some text in the first file"
                val initialContentFile2 = "some text in the second file"
                val contentUntrackedFile = "some text for the untracked file"

                file1.writeText(initialContentFile1)
                file2.writeText(initialContentFile2)
                untrackedFile.writeText(contentUntrackedFile)

                TestedProgram().start("commit", "First commit")


                val changedContentFile1 = "some changed text in the first file"
                val changedContentFile2 = "some changed text in the second file"
                file1.writeText(changedContentFile1)
                file2.writeText(changedContentFile2)

                TestedProgram().start("commit", "Second commit")

                checkOutputString(TestedProgram().start("checkout"), "Commit id was not passed.")
                checkOutputString(TestedProgram().start("checkout", "wrongId"), "Commit does not exist.")

                val parsedHashes = parseCommitHashes(TestedProgram().start("log"))
                if (parsedHashes.isEmpty()){
                    throw WrongAnswer(
                        "Found no commit hashes after executing log!"
                    )
                }
                val firstCommitHash = parsedHashes.last()

                checkOutputString(
                    TestedProgram().start("checkout", firstCommitHash),
                    "Switched to commit $firstCommitHash."
                )

                //Tested code could delete the file by now
                try {

                    if (file1.readText() != initialContentFile1) {
                        throw WrongAnswer(
                            "Wrong content of the tracked files after checkout"
                        )
                    }
                } catch (e:FileNotFoundException){
                    throw WrongAnswer(
                        "Test tried to read file contents but could not find: ${file1.name}"
                    )
                }
                try {

                    if (file2.readText() != initialContentFile2) {
                        throw WrongAnswer(
                            "Wrong content of the tracked files after checkout"
                        )
                    }
                } catch (e:FileNotFoundException){
                    throw WrongAnswer(
                        "Test tried to read file contents but could not find: ${file2.name}"
                    )
                }

                try {

                    if (untrackedFile.readText() != contentUntrackedFile) {
                        throw WrongAnswer(
                            "Your program changed untracked file"
                        )
                    }
                } catch (e: FileNotFoundException){
                    throw WrongAnswer(
                        "Test tried to read file contents but could not find: ${untrackedFile.name}"
                    )
                }

            } finally {
                deleteVcsDir()
                deleteFiles(file1, file2, untrackedFile)
            }

            return CheckResult.correct()
        }


        @DynamicTest(order = 9)
        fun wrongArgTest(): CheckResult {
            try {
                val suffix = Random.nextInt(0,1000)
                checkOutputString(TestedProgram().start("wrongArg$suffix"), "'wrongArg$suffix' is not a SVCS command.")
            } finally {
                deleteVcsDir()
            }
            return CheckResult.correct()
        }

        private fun prepareString(s: String) =
            s.trim().split(" ").filter { it.isNotBlank() }.joinToString(" ")

        private fun prepareLogOutput(s: String) =
            prepareString(s).trim().split('\n').filter { it.isNotBlank() }.joinToString("\n")

        private fun checkHelpPageOutput(got: String) {
            val helpPage = "These are SVCS commands:\n" +
                    "config     Get and set a username.\n" +
                    "add        Add a file to the index.\n" +
                    "log        Show commit logs.\n" +
                    "commit     Save changes.\n" +
                    "checkout   Restore a file."

            if (got.isBlank()) {
                throw WrongAnswer(
                    "Your program should output:\n$helpPage\n\n" +
                            "But printed nothing"
                )
            } else if (!prepareString(got).equals(prepareString(helpPage), true)) {
                throw WrongAnswer(
                    "Your program should output:\n$helpPage\n\n" +
                            "But printed:\n$got"
                )
            }
        }


        private fun checkLogOutput(got: String, want: String, regex: Regex) {
            if (got.isBlank()) {
                throw WrongAnswer(
                    "Your program printed nothing"
                )
            } else if (!prepareLogOutput(got).contains(regex)) {
                throw WrongAnswer(
                    "Your program should output:\n\"$want\",\n" +
                            "but printed:\n\"$got\""
                )
            }
        }

        private fun parseCommitHashes(logOutput: String): List<String> {
            val regex = Regex(
                "commit ([^\\s]+)", RegexOption.IGNORE_CASE
            )

            return regex.findAll(logOutput).map { it.groupValues[1] }.toList()
        }

        private fun checkUniqueCommitHashes(got: String) {
            val commitHashes = parseCommitHashes(got)

            if (commitHashes.size != commitHashes.toSet().size) {
                throw WrongAnswer(
                    "Commit ids are not unique"
                )
            }
        }

        private fun checkOutputString(got: String, want: String) {
            if (got.isBlank()) {
                throw WrongAnswer(
                    "Your program should output \"$want\",\n" +
                            "but printed nothing"
                )
            } else if (!prepareString(got).equals(want, true)) {
                throw WrongAnswer(
                    "Your program should output \"$want\",\n" +
                            "but printed: \"$got\""
                )
            }
        }

        private fun getRandomUserName() =
            listOf("Marie", "Anna", "Diane", "Sofie", "Christine").random() + Random.nextInt(1000)

        private fun deleteVcsDir() {
            val dir = File("vcs")
            try {
                if (dir.exists()) {
                    dir.deleteRecursively()
                }
            } catch (ex: IOException) { ex.printStackTrace() }
        }

        private fun deleteFiles(vararg files: File) {
            for(file in files) {
                try { file.delete() } catch (ex: IOException){ ex.printStackTrace() }
            }
        }
    }
  learner_created: false
- name: src/svcs/Files.kt
  visible: true
  text: |-
    package svcs

    import java.nio.file.Path
    import java.security.MessageDigest
    import kotlin.io.path.*

    val CONFIG_FILE = Path("vcs", "config.txt")
    val INDEX_FILE = Path("vcs", "index.txt")
    val LOG_FILE = Path("vcs", "log.txt")
    val ROOT_DIR = Path("vcs")
    val COMMIT_DIR = Path("vcs", "commits")
    val DIRS = arrayOf(ROOT_DIR, COMMIT_DIR)
    val FILES = arrayOf(CONFIG_FILE, INDEX_FILE, LOG_FILE)

    fun getLastCommits(): List<String> {
        val commits = COMMIT_DIR.listDirectoryEntries()
            .sortedBy(Path::getLastModifiedTime)
            .map { it.fileName.name }

        return when (commits.size) {
            0 -> emptyList()
            1 -> commits.subList(0, 1)
            else -> commits.subList(commits.size - 2, commits.size)
        }
    }

    fun Path.treeWalk(action: (Path) -> Any) {
        if (this.exists()) {
            if (this.isDirectory()) {
                for (file in this.listDirectoryEntries())
                    file.treeWalk(action)
            }  else action(this)
        }
    }

    fun Path.treeRead(digest: MessageDigest) = this.treeWalk { digest.update( it.fileName.name.toByteArray() + it.readBytes()) }
    fun Path.treeCopy(destination: Path) = this.treeWalk { it.copyTo(destination.resolve(it.fileName)) }
  learner_created: true
- name: src/svcs/Command.kt
  visible: true
  text: |
    package svcs

    import kotlin.io.path.*

    class Commands {
        companion object {
            val COMMANDS = Command.values()
                .associateBy { it.commandName }

            fun run(args: Array<String>): String {
                return when (val arg = args.getOrNull(0)) {
                    "--help", null -> help()
                    else -> when (val command = COMMANDS[arg]) {
                        null -> "'${arg}' is not a SVCS command."
                        else -> command.handler(args)
                    }
                }
            }

            fun help(): String {
                return "These are SVCS commands:\n" + COMMANDS.values.joinToString("\n")
            }

            fun config(args: Array<String>): String {
                return when (val name = args.getOrNull(1))  {
                    null -> when (val username = CONFIG_FILE.readText()) {
                        "" -> "Please, tell me who you are."
                        else -> "The username is $username."
                    } else -> {
                        CONFIG_FILE.writeText("$name")
                        "The username is $name."
                    }
                }
            }

            fun add(args: Array<String>): String {
                return when (val filename = args.getOrNull(1))  {
                    null -> when (val tracked = INDEX_FILE.readText()) {
                        "" -> Command.Add.description
                        else -> "Tracked files:\n$tracked"
                    } else -> {
                        if (Path(filename).exists()) {
                            INDEX_FILE.appendText("$filename\n")
                            "The file '$filename' is tracked."
                        } else "Can't find '$filename'."
                    }
                }
            }

            fun log(args: Array<String>): String {
                return when (val commits = LOG_FILE.readText()) {
                    "" -> "No commits yet."
                    else -> commits.split("\n\n")
                        .asReversed()
                        .joinToString("\n")
                }
            }

            fun commit(args: Array<String>): String {
                val lastCommits = getLastCommits()

                return if (hasChanges(lastCommits)) {
                    val author = CONFIG_FILE.readText()
                    val description = args.getOrNull(1) ?: return "Message was not passed."
                    val hash = hashCommit(lastCommits.lastOrNull() ?: "")
                    doCommit(hash)
                    LOG_FILE.appendText("commit $hash\nAuthor: $author\n$description\n\n")
                    "Changes are committed."
                } else "Nothing to commit."
            }

            fun doCommit(hash: String) {
                val commitDir = COMMIT_DIR.resolve(hash)
                commitDir.createDirectory()

                for (file in INDEX_FILE.readLines())
                    Path(file).treeCopy(commitDir)
            }

            fun checkout(args: Array<String>): String = default(Command.Checkout)(args)
            private fun default(command: Command): (Array<String>) -> String = { command.description }
        }
    }

    enum class Command(val commandName: String, val description: String, val handler: (Array<String>) -> String) {
        Config("config", "Get and set a username.", Commands::config),
        Add("add", "Add a file to the index.", Commands::add),
        Log("log", "Show commit logs.", Commands::log),
        Commit("commit", "Save changes.", Commands::commit),
        Checkout("checkout","Restore a file.", Commands::checkout);

        override fun toString(): String {
            return this.commandName.padEnd(11, ' ') + this.description
        }
    }
  learner_created: true
- name: src/svcs/Hashing.kt
  visible: true
  text: |-
    package svcs

    import java.security.MessageDigest
    import kotlin.io.path.Path
    import kotlin.io.path.readLines

    fun ByteArray.toHex(): String {
        return this.joinToString(separator = "") { eachByte -> "%02x".format(eachByte) }
    }

    fun hasChanges(lastCommits: List<String>): Boolean {
        val lastCommit = when (lastCommits.size) {
            0 -> return true
            1 -> ""
            else -> lastCommits[1]
        }

        val hashed = hashCommit(lastCommit)

        return !MessageDigest.isEqual(hashed.toByteArray(), lastCommits[0].toByteArray())
    }

    fun hashCommit(lastCommit: String): String {
        val digest = MessageDigest.getInstance("SHA-1")
        digest.update(lastCommit.toByteArray())

        for (path in INDEX_FILE.readLines()) {
            Path(path).treeRead(digest)
        }

        return digest.digest().toHex()
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13045#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Fri, 24 Mar 2023 03:06:36 UTC"
record: -1

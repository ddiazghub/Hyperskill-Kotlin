type: edu
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = 32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = 2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c  ").trim();
                    if (!output.equals("2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 13 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process " +
                            "multiple operations with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // test suit for the 8th stage with very large numbers
                    main.start();

                    // testing basic assignment
                    String output = main.execute("n = 32000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - n - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // testing reassignment with big values
                    output = main.execute("c = n \nc = 2000000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("2000000000000000000000")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute(
                        "11000000000000000000 - 9000000000000000000 - " +
                        "c + 1998000000000000000000").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute(
                        "5000000000000000000 --- 2000000000000000000 " +
                        "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                    if (!output.equals("10000000000000000000")) {
                        return CheckResult.wrong("The program cannot process multiple " +
                            "operations with several operators.");
                    }

                    // testing all operators, with variables
                    main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                    output = main.execute("a * 4000000000000000000 / " +
                        "b - (3000000000000000000 - 1000000000000000000)").trim();
                    if (!output.equals("12000000000000000000")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })

            );
        }
    }
  learner_created: false
- name: src/calculator/CalculatorException.kt
  visible: true
  text: |-
    package calculator

    sealed class CalculatorException(message: String) : RuntimeException(message) {
        object InvalidExpression : CalculatorException("Invalid expression")
        object UnknownCommand : CalculatorException("Unknown command")
        object InvalidAssignment : CalculatorException("Invalid assignment")
        object InvalidIdentifier : CalculatorException("Invalid identifier")
        object UnknownVariable : CalculatorException("Unknown variable")
    }
  learner_created: true
- name: src/calculator/Helpers.kt
  visible: true
  text: |-
    package calculator

    fun readlns(): Sequence<String> = sequence {
        while (true) {
            val input = readln().trim()
            if (input.isNotEmpty()) yield(input)
        }
    }
  learner_created: true
- name: src/calculator/Statement.kt
  visible: true
  text: |-
    package calculator

    import kotlin.math.pow

    sealed class Statement {
        class Expression(private val tokens: List<Token.ExpressionToken>) : Statement() {
            fun eval(variables: Map<String, Int>): Int {
                val stack = mutableListOf<Int>()

                for (token in this.tokens) {
                    when (token) {
                        is Token.Number -> stack.add(token.value)
                        is Token.Variable -> stack.add(token.sign * (variables[token.name] ?: throw CalculatorException.UnknownVariable))
                        is Token.Operator -> if (stack.size > 1) {
                            val result = (stack.removeLast() to stack.removeLast()).let {
                                when (token) {
                                    is Token.Add -> it.second + it.first
                                    is Token.Sub -> it.second - it.first
                                    is Token.Mul -> it.second * it.first
                                    is Token.Div -> it.second / it.first
                                    is Token.Pow -> it.second.toDouble().pow(it.first).toInt()
                                }
                            }

                            stack.add(result)
                        } else throw CalculatorException.InvalidExpression
                        else -> throw CalculatorException.InvalidExpression
                    }
                }

                return stack.last()
            }

            companion object {
                fun parse(tokens: List<Token>): Expression {
                    val expression = reduce(tokens)
                    val stack = mutableListOf<Token.ExpressionToken>()
                    val result = mutableListOf<Token.ExpressionToken>()

                    for (token in expression) {
                        when (token) {
                            is Token.Operand -> result.add(token)
                            is Token.OpenParenth -> stack.add(token)
                            is Token.Operator -> {
                                while ((stack.lastOrNull() ?: Token.OpenParenth).let { it is Token.Operator && token.priority <= it.priority })
                                    result.add(stack.removeLast())

                                stack.add(token)
                            }
                            is Token.CloseParenth -> {
                                while ((stack.lastOrNull() ?: throw CalculatorException.InvalidExpression) !is Token.OpenParenth)
                                    result.add(stack.removeLast())

                                stack.removeLast()
                            }
                            is Token.Assign -> throw CalculatorException.InvalidAssignment
                            else -> throw CalculatorException.InvalidExpression
                        }
                    }

                    while (stack.isNotEmpty()) {
                        when (val top = stack.removeLast()) {
                            is Token.OpenParenth -> throw CalculatorException.InvalidExpression
                            else -> result.add(top)
                        }
                    }

                    return Expression(result)
                }

                private fun reduce(tokens: List<Token>): List<Token> {
                    val result = mutableListOf<Token>()

                    for (token in tokens) {
                        val last = result.lastOrNull()

                        when (token) {
                            is Token.Add -> if (last is Token.Operand) result.add(token)
                            is Token.Sub -> when (last) {
                                is Token.Add -> result.removeLast().also { result.add(token) }
                                is Token.Sub -> result.removeLast().also { result.add(Token.Add) }
                                else -> result.add(token)
                            }
                            is Token.Number -> when (last to result.elementAtOrNull(result.size - 2)) {
                                Token.Sub to null, Token.Sub to Token.OpenParenth -> result.removeLast().also {
                                    result.add(Token.Number(-token.value))
                                }
                                else -> result.add(token)
                            }
                            else -> result.add(token)
                        }
                    }

                    return result
                }
            }
        }

        class Assignment(val variable: String, val expression: Expression) : Statement() {
            companion object {
                fun parse(tokens: List<Token>): Assignment? {
                    return when (tokens.indexOf(Token.Assign)) {
                        -1 -> null
                        1 -> tokens[0].let {
                            if (it is Token.Variable)
                                Assignment(it.name, Expression.parse(tokens.subList(2, tokens.size)))
                            else throw CalculatorException.InvalidIdentifier
                        }
                        else -> throw CalculatorException.InvalidAssignment
                    }
                }
            }
        }

        sealed class Command : Statement() {
            companion object {
                fun parse(tokens: List<Token>): Command = when (tokens) {
                    listOf(Token.Exit) -> Exit
                    listOf(Token.Help) -> Help
                    else -> throw CalculatorException.UnknownCommand
                }
            }
        }

        object Exit : Command()
        object Help : Command()

        companion object {
            private val TOKEN_REGEX = Regex("\\d+|[a-zA-Z]+|\\++|\\S")

            private fun lex(statement: String): List<Token> {
                return TOKEN_REGEX
                    .findAll(statement)
                    .map { Token.parse(it.groupValues[0]) }
                    .toList()
            }

            fun parse(string: String): Statement = lex(string).let {
                if (it[0] === Token.Div) Command.parse(it.subList(1, it.size))
                else Assignment.parse(it) ?: Expression.parse(it)
            }
        }
    }
  learner_created: true
- name: src/calculator/Calculator.kt
  visible: true
  text: |-
    package calculator

    object Calculator {
        private val variables: MutableMap<String, Int> = mutableMapOf()

        fun start() {
            for (line in readlns()) {
                try {
                    when (val statement = Statement.parse(line)) {
                        is Statement.Exit -> return println("Bye!")
                        is Statement.Help -> println("The program calculates the sum of numbers")
                        is Statement.Expression -> println(statement.eval(variables))
                        is Statement.Assignment -> try {
                            variables[statement.variable] = statement.expression.eval(variables)
                        } catch (e: CalculatorException) {
                            throw CalculatorException.InvalidAssignment
                        }
                    }
                } catch (e: CalculatorException) {
                    println(e.message)
                }
            }
        }
    }
  learner_created: true
- name: src/calculator/Token.kt
  visible: true
  text: |-
    package calculator

    sealed class Token {
        object Assign : Token()
        object Exit : Token()
        object Help : Token()

        sealed class ExpressionToken : Token()
        object OpenParenth : ExpressionToken()
        object CloseParenth : ExpressionToken()

        sealed class Operand : ExpressionToken()
        class Variable(val name: String, val sign: Int = 1) : Operand()
        class Number(val value: Int) : Operand()

        sealed class Operator(val priority: Int) : ExpressionToken()
        object Add : Operator(0)
        object Sub : Operator(0)
        object Mul : Operator(1)
        object Div : Operator(1)
        object Pow : Operator(2)

        companion object {
            fun parse(string: String): Token = when (string.last()) {
                in 'a'..'z', in 'A'..'Z' -> when (string) {
                    "exit" -> Exit
                    "help" -> Help
                    else -> Variable(string)
                }
                in '0'..'9' -> Number(string.toInt())
                '+' -> Add
                '-' -> Sub
                '*' -> Mul
                '/' -> Div
                '^' -> Pow
                '(' -> OpenParenth
                ')' -> CloseParenth
                '=' -> Assign
                else -> throw CalculatorException.InvalidExpression
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7816#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 04 Apr 2023 22:12:08 UTC"
record: -1

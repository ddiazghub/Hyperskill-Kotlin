type: edu
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = -32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = -2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("-2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 9 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process multiple operations " +
                                "with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown") && !output.startsWith("invalid")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })
            );
        }
    }
  learner_created: false
- name: src/calculator/CalculatorException.kt
  visible: true
  text: |-
    package calculator

    sealed class CalculatorException(message: String) : RuntimeException(message) {
        object InvalidExpression : CalculatorException("Invalid expression")
        object UnknownCommand : CalculatorException("Unknown command")
        object InvalidAssignment : CalculatorException("Invalid assignment")
        object InvalidIdentifier : CalculatorException("Invalid identifier")
        object UnknownVariable : CalculatorException("Unknown variable")
    }
  learner_created: true
- name: src/calculator/Helpers.kt
  visible: true
  text: |-
    package calculator

    val WHITESPACE = Regex("\\s+")
    val PLUS = Regex("((\\+\\s*)+|-\\s*-)")
    val MINUS = Regex("\\s*-\\s*")
    val ASSIGNMENT = Regex("\\s*=\\s*")

    fun readlns(): Sequence<String> = sequence {
        while (true) {
            val input = readln().trim()
            if (input.isNotEmpty()) yield(input)
        }
    }
  learner_created: true
- name: src/calculator/Statement.kt
  visible: true
  text: |-
    package calculator

    sealed class Statement {
        class Expression(private val expression: String) : Statement() {
            fun eval(variables: Map<String, Int>): Int {
                val result = expression.replace(PLUS, " ")
                    .replace(MINUS, " -")
                    .trimStart()
                    .split(WHITESPACE)
                    .map { it.toIntOrNull() ?: variables[it] }

                if (result.size == 1 && result[0] == null)
                        throw CalculatorException.UnknownVariable

                return result.sumOf { it ?: throw CalculatorException.InvalidExpression }
            }
        }

        class Assignment(val variable: String, val expression: Expression) : Statement() {
            companion object {
                fun parse(string: String): Assignment? = string.split(ASSIGNMENT).let { parts ->
                    when (parts.size) {
                        1 -> null
                        2 -> parts[0].takeIf { it.all { it in 'a'..'z' || it in 'A'..'Z' } }.let {
                            Assignment(it ?: throw CalculatorException.InvalidIdentifier, Expression(parts[1]))
                        }
                        else -> throw CalculatorException.InvalidAssignment
                    }
                }
            }
        }

        sealed class Command : Statement() {
            companion object {
                fun parse(string: String): Command = when (string) {
                    "exit" -> Exit
                    "help" -> Help
                    else -> throw CalculatorException.UnknownCommand
                }
            }
        }

        object Exit : Command()
        object Help : Command()

        companion object {
            fun parse(string: String): Statement = if (string.startsWith("/")) {
                Command.parse(string.substring(1))
            } else {
                Assignment.parse(string) ?: Expression(string)
            }
        }
    }
  learner_created: true
- name: src/calculator/Calculator.kt
  visible: true
  text: |-
    package calculator

    object Calculator {
        val variables: MutableMap<String, Int> = mutableMapOf()

        fun start() {
            for (line in readlns()) {
                try {
                    when (val statement = Statement.parse(line)) {
                        Statement.Exit -> return println("Bye!")
                        Statement.Help -> println("The program calculates the sum of numbers")
                        is Statement.Expression -> println(statement.eval(variables))
                        is Statement.Assignment -> try {
                            statement.expression.eval(variables).let {
                                variables[statement.variable] = it
                                variables["-" + statement.variable] = -it
                            }
                        } catch (e: CalculatorException) {
                            throw CalculatorException.InvalidAssignment
                        }
                    }
                } catch (e: CalculatorException) {
                    println(e.message)
                }
            }
        }
    }
  learner_created: true
- name: src/calculator/Token.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7815#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 04 Apr 2023 19:04:44 UTC"
record: 7

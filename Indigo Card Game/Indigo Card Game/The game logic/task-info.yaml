type: edu
files:
- name: src/indigo/Main.kt
  visible: true
  text: |-
    package indigo

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/IndigoCardGameTest.kt
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram

    class ErrorData(val correct: Boolean, val errorMsg: String,
                    val topCard: String = "", val cardsList: List<String> = emptyList())

    class CardGameTest : StageTest<Any>() {

        @DynamicTest
        fun playFirstNormalExeTest3(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.first())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.first()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("1").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }
                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer >= numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playFirstNormalExeTest4(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.last())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.last()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("$numOfCards").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }
                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer >= numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playSecondNormalExeTest3(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("no").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.first())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.first()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("1").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }


                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer > numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playSecondNormalExeTest4(): CheckResult {
            val deck = mutableListOf<String>()
            val cardsInHand = mutableListOf<String>()
            var pointsPlayer = 0
            var pointsComputer = 0
            var pointsOnTable = 0
            var numOfCardsPlayer = 0
            var numOfCardsComputer = 0
            var numOfCardsOnTable = 0
            var whoWon = 0

            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("no").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            deck.addAll(validOutput.cardsList)
            var topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            numOfCardsOnTable = 4
            pointsOnTable = countPoints(validOutput.cardsList)
            repeat(4) {
                for (numOfCards in 6 downTo 1) {
                    validOutput = checkComputerOutput2(outputString, numOfCardsOnTable, topCard)
                    if (!validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    var hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.topCard)
                        (a.first == b.first) || (a.second == b.second)
                    }
                    topCard = validOutput.topCard
                    if ( deck.contains(topCard) )
                        return CheckResult(false, "Computer played card is a duplicate.")
                    deck.add(topCard)
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    outputString = outputString.substringAfter(topCard).trim()
                    if (hasWon) {
                        whoWon = 1
                        pointsComputer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsComputer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Computer wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong computer wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }

                    validOutput = checkPlayerOutput2(outputString, numOfCards, numOfCardsOnTable, topCard)
                    if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
                    if (numOfCards == 6) {
                        cardsInHand.clear()
                        cardsInHand.addAll(validOutput.cardsList)
                        for (card in cardsInHand)
                            if ( deck.contains(card) )
                                return CheckResult(false, "Some cards in hand have already passed on table (Duplicates).")
                        deck.addAll(cardsInHand)
                    } else {
                        if ( !cardsInHand.containsAll(validOutput.cardsList) )
                            return CheckResult(false, "Cards in hand have changed since the last card was played.")
                    }
                    hasWon = if (numOfCardsOnTable == 0) false
                    else {
                        val a = getRankSuit(topCard)
                        val b = getRankSuit(validOutput.cardsList.last())
                        a.first == b.first || a.second == b.second
                    }
                    topCard = validOutput.cardsList.last()
                    numOfCardsOnTable++
                    pointsOnTable += countPoints(listOf(topCard))
                    cardsInHand.remove(topCard)
                    outputString = main.execute("$numOfCards").trim()
                    if (hasWon) {
                        whoWon = 0
                        pointsPlayer += pointsOnTable
                        pointsOnTable = 0
                        numOfCardsPlayer += numOfCardsOnTable
                        numOfCardsOnTable = 0
                        position = checkOutput(outputString.lowercase(), 0, "Player wins cards".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong player wins cards message.")
                        position = checkOutput(outputString.lowercase(), position,
                            "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                            "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase())
                        if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
                        outputString = outputString.substringAfter("Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer").trim()
                    }
                }
            }

            position = if (numOfCardsOnTable == 0) checkOutput(outputString.lowercase(), 0, "No cards on the table".lowercase())
            else checkOutput(outputString.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output for number of cards or the top card.")
            if (whoWon == 0) {
                pointsPlayer += pointsOnTable
                numOfCardsPlayer += numOfCardsOnTable
            } else {
                pointsComputer += pointsOnTable
                numOfCardsComputer += numOfCardsOnTable
            }
            if (numOfCardsPlayer > numOfCardsComputer) pointsPlayer += 3
            else pointsComputer += 3
            position = checkOutput(outputString.lowercase(), position,
                "Score: Player $pointsPlayer - Computer $pointsComputer".lowercase(),
                "Cards: Player $numOfCardsPlayer - Computer $numOfCardsComputer".lowercase(),
                "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong score output.")
            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun playFirstWrongInputTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("Hello").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("me").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("0").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("play").trim()
            position = checkOutput(outputString.lowercase(), 0, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output after wrong input after the play first question.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            val topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            validOutput = checkPlayerOutput2(outputString, 6, 4, topCard)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.lowercase(), 0, "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong exit message.")

            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun wrongCardToPlayTest(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim()
            var position = checkOutput(outputString.lowercase(), 0, "Indigo Card Game".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong game title.")
            position = checkOutput(outputString.lowercase(), position, "Play first?".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong play first prompt.")

            outputString = main.execute("yes").trim()
            var validOutput = checkInitial(outputString)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)
            val topCard = validOutput.topCard

            outputString = outputString.substringAfter(topCard).trim()
            validOutput = checkPlayerOutput2(outputString, 6, 4, topCard)
            if ( !validOutput.correct) return CheckResult(false, validOutput.errorMsg)

            outputString = main.execute("0").trim()
            position = checkOutput(outputString.lowercase(), 0, "Choose a card to play (1-6):".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output, after input an invalid card number.")

            outputString = main.execute("7").trim()
            position = checkOutput(outputString.lowercase(), 0, "Choose a card to play (1-6):".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output, after input an invalid card number.")

            outputString = main.execute("One").trim()
            position = checkOutput(outputString.lowercase(), 0, "Choose a card to play (1-6):".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong output, after input an invalid card number.")


            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.lowercase(), 0, "Game Over".lowercase())
            if ( position  == -1 ) return CheckResult(false, "Wrong exit message.")

            if (!main.isFinished) return CheckResult(false, "Application hasn't exited after exit command.")

            return CheckResult.correct()
        }

    }

    fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
        var searchPosition = searchPos
        for (str in checkStr) {
            val findPosition = outputString.indexOf(str, searchPosition)
            if (findPosition == -1) return -1
            if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
            searchPosition = findPosition + str.length
        }
        return searchPosition
    }

    fun checkOIfValidCards2(cardsStr: String, numOfCards: Int): Boolean {
        val cards = cardsStr.split(" ")
        val cardRegex = "(A|[2-9]|10|J|Q|K)(♦|♥|♠|♣)".toRegex()
        for (card in cards) if (!card.matches(cardRegex)) {
            return false
        }
        return cards.size == numOfCards
    }

    fun checkIfUniqueCards(outputString: String): Boolean {
        val lines = outputString.lines()
        val cards = lines.first().trim().split(" ")
        return cards.distinct().size == cards.size
    }

    fun checkOIfValidCardsInHand(cardsStr: String, numOfCards: Int): Boolean {
        val cards = cardsStr.split(" ")
        val cardRegex = "([1-6])\\)(A|[2-9]|10|J|Q|K)(♦|♥|♠|♣)".toRegex()
        for (card in cards) if (!card.matches(cardRegex)) {
            return false
        }
        return cards.size == numOfCards
    }

    fun checkInitial(output: String): ErrorData {
        val position = checkOutput(output.lowercase(), 0, "Initial cards on the table:".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong Initial cards message.")
        val cardsStr = output.substring(position).lines().map { it.trim() }.first { it != "" }
        if (cardsStr.isEmpty()) return ErrorData(false, "No initial cards are printed.")
        if ( !checkOIfValidCards2(cardsStr, 4) ) return ErrorData(false, "Invalid initial cards.")
        if ( !checkIfUniqueCards(cardsStr) ) return ErrorData(false, "Initial cards contain duplicate cards.")
        val cardsOnTable = cardsStr.trim().split(" ")
        val topCard = cardsOnTable.last()
        return ErrorData(true, "", topCard, cardsOnTable)
    }

    fun checkPlayerOutput2(output: String, numOfCards: Int, numOfCardsOnTable : Int, topCard: String): ErrorData {
        var position = if (numOfCardsOnTable == 0) checkOutput(output.lowercase(), 0, "No cards on the table".lowercase())
        else checkOutput(output.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Player turn: Wrong message for number of cards or the top card.")

        position = checkOutput(output.lowercase(), position, "Cards in hand:".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong cards in hand message.")
        val cardsInHand = output.substring(position).lines().map { it.trim() }.firstOrNull() { it != "" }
            ?: return ErrorData(false, "Wrong cards in hand message.")
        if (!checkOIfValidCardsInHand(cardsInHand, numOfCards)) return ErrorData(false, "Wrong cards in hand message.")
        val listCardsInHand = cardsInHand.split(" ").map { it.substring(2) }
        var strCardsInHand = ""
        for (card in listCardsInHand) strCardsInHand += "$card "
        if ( !checkIfUniqueCards(strCardsInHand) ) return ErrorData(false, "Player's cards in hand contain duplicate cards.")
        val lastCard = listCardsInHand.last()
        position = output.indexOf(lastCard, position)
        position = checkOutput(output.lowercase(), position + lastCard.length, "Choose a card to play (1-$numOfCards):".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong prompt to choose a card.")
        return ErrorData(true, "", cardsList = listCardsInHand)
    }

    fun checkComputerOutput2(output: String, numOfCardsOnTable : Int, topCard: String): ErrorData {
        var position = if (numOfCardsOnTable == 0) checkOutput(output.lowercase(), 0, "No cards on the table".lowercase())
        else checkOutput(output.lowercase(), 0, "$numOfCardsOnTable cards on the table, and the top card is $topCard".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Computer turn: Wrong output for number of cards or the top card.")

        position = checkOutput(output.lowercase(), position, "Computer plays".lowercase())
        if ( position  == -1 ) return ErrorData(false, "Wrong computer plays a card message.")

        val endIndex = output.indexOf("\n", position)
        if (endIndex < 0) return ErrorData(false, "Wrong output. Some lines are missing")
        val card = output.substring(position, endIndex).trim()
        if (!checkOIfValidCards2(card, 1)) return ErrorData(false, "Computer played an invalid card.")
        return ErrorData(true, "", card)
    }

    fun getRankSuit(card:String): Pair<String, String> {
        return if (card.length == 2) Pair(card.substring(0, 1), card.substring(1, 2))
        else Pair(card.substring(0, 2), card.substring(2, 3))
    }

    fun countPoints(cards: List<String>): Int {
        val ranks = listOf("A", "10", "J", "Q", "K")
        var count = 0
        for (card in cards) {
            val rank = if (card.length == 2) card.substring(0, 1)
            else card.substring(0, 2)
            if (rank in ranks) count++
        }
        return count
    }
  learner_created: false
- name: src/indigo/Cards.kt
  visible: true
  text: |-
    package indigo

    class Cards() {
        val cards: MutableList<String> = mutableListOf()

        val size: Int
            get() = this.cards.size

        constructor(deck: Cards, n: Int) : this() {
            this.add(deck, n)
        }

        fun take(n: Int): Sequence<String> {
            return when (n) {
                in Int.MIN_VALUE..0, in 53..Int.MAX_VALUE -> throw IndigoException.InvalidNumber
                in cards.size + 1..52 -> throw IndigoException.InsufficientCards
                else -> sequence {
                    repeat(n) {
                        yield(cards.removeLast())
                    }
                }
            }
        }

        fun takeAt(i: Int): String = this.cards.removeAt(i)
        fun add(cards: Cards, n: Int) = this.cards.addAll(cards.take(n))
        fun addAt(cards: Cards, i: Int) = this.cards.add(cards.takeAt(i))
        fun top(): String = this.cards.last()
        fun shuffle() = cards.shuffle()
        override fun toString(): String = this.cards.joinToString(" ")

        companion object {
            val RANKS = arrayOf("A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K")
            val SUITS = arrayOf("♦", "♥", "♠", "♣")

            val DEFAULT = RANKS
                .flatMap { rank -> SUITS.map { "$rank$it" } }
                .toMutableList()

            fun deck(): Cards {
                val deck = Cards()
                deck.cards.addAll(DEFAULT)
                deck.shuffle()

                return deck
            }
        }
    }
  learner_created: true
- name: src/indigo/Indigo.kt
  visible: true
  text: |-
    package indigo

    import kotlin.random.Random

    class Indigo {
        val deck = Cards.deck()
        val table = Cards(deck, 4)
        val playerHand = Cards(deck, 6)
        val cpuHand = Cards(deck, 6)

        fun start() {
            println("Indigo Card Game")
            var first: String

            do first = readln("Play first?").lowercase()
            while (first !in arrayOf("yes", "no"))

            var player = first == "yes"
            println("Initial cards on the table: $table")

            loop@while (true) {
                try{
                    println("\n${table.size} cards on the table, and the top card is ${table.top()}")

                    if (table.size == 52)
                        break

                    if (player) {
                        println(
                            "Cards in hand: ${
                                playerHand.cards.withIndex().joinToString(" ") { "${it.index + 1})${it.value}" }
                            }"
                        )

                        var input: String

                        do {
                            input = readln("Choose a card to play (1-${playerHand.size}):")

                            if (input == "exit")
                                break@loop
                        }
                        while (input.toIntOrNull() !in 1..playerHand.size)

                        this.table.addAt(playerHand, input.toInt() - 1)

                        if (playerHand.size == 0 && deck.size > 0)
                            playerHand.add(deck, 6)
                    } else {
                        table.addAt(cpuHand, Random.nextInt(0, cpuHand.size))
                        println("Computer plays ${table.top()}")

                        if (cpuHand.size == 0 && deck.size > 0)
                            cpuHand.add(deck, 6)
                    }

                    player = !player
                } catch (e: IndigoException) {
                    println(e.message)
                }
            }

            println("Game Over")
        }
    }
  learner_created: true
- name: src/indigo/Helpers.kt
  visible: true
  text: |-
    package indigo

    fun readln(prompt: String): String {
        println(prompt)

        return readln()
    }
  learner_created: true
- name: src/indigo/Player.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16511#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 29 Mar 2023 03:38:34 UTC"
record: 4
